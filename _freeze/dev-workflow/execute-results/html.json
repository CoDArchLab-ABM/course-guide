{
  "hash": "4fa50419a6ecff9558e3ebb7ce17da56",
  "result": {
    "engine": "knitr",
    "markdown": "# A simulation modeller as a software: a workflow {#dev-workflow}\n\n## The \"big picture\"\n\nAgent-based modelling (ABM) is more than coding‚Äîit is an iterative and cumulative research process that benefits from software engineering principles. Each simulation model can be seen as a small research *software project*, and the modeller as its *developer*.\nThinking like a software developer helps to ensure that the model is:\n\n* **Reproducible:** anyone (including your future self) can run it and obtain the same results.\n* **Transparent:** the model‚Äôs assumptions, mechanisms, and implementation are easy to inspect.\n* **Collaborative:** colleagues can contribute, review, or reuse your code and data.\n* **Evolvable:** improvements, corrections, or new experiments can be added without breaking the project.\n\nA typical simulation-modelling workflow can be represented as a cycle of five stages:\n\n1. **Conceptualisation:** Define the system, processes, and hypotheses. Identify inputs (data), outputs, and validation criteria.\n2. **Implementation:** Translate the conceptual model into executable code (e.g., in NetLogo).\n3. **Version control:** Track every change with Git; publish and document the model using GitHub.\n4. **Experimentation:** Run systematic simulations using NetLogo‚Äôs *BehaviorSpace* or custom scripts (e.g., in R).\n5. **Analysis and publication:** Process and visualise simulation outputs in R, write up results, and share your full project repository.\n\nIn practice, these stages overlap and repeat. Conceptual choices affect implementation; analysis reveals bugs or design flaws; revisions are documented in version control.\nThe goal is *incremental improvement* rather than perfection at once.\n\n### Example workflow\n\n```\nConceptual Model (diagram, notes)\n        ‚Üì\nImplementation in NetLogo (.nlogo)\n        ‚Üì\nVersioning and documentation (Git + GitHub)\n        ‚Üì\nSimulation experiments (BehaviorSpace)\n        ‚Üì\nData analysis and plots (R scripts)\n        ‚Ü∫\nRevision / new hypothesis\n```\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngraph <- DiagrammeR::mermaid(\"\n  flowchart LR\n    A[üí° Conceptualisation<br/>Define system, agents, hypotheses] --> \n    B[üß± Implementation<br/>NetLogo model (.nlogo)]\n    B --> C[üîÑ Version control<br/>Git + GitHub]\n    C --> D[üß™ Experimentation<br/>BehaviorSpace runs]\n    D --> E[üìä Analysis<br/>R scripts, plots, stats]\n    E --> F[üì¢ Publication<br/>Release + Zenodo DOI]\n    F --> A[üîÅ Revision & new hypotheses]\n    style A fill:#fef6e4,stroke:#c4a000,stroke-width:1px\n    style B fill:#e6f3ff,stroke:#2176ff,stroke-width:1px\n    style C fill:#f0f9f0,stroke:#009900,stroke-width:1px\n    style D fill:#fff4e6,stroke:#ff8c00,stroke-width:1px\n    style E fill:#f3e6ff,stroke:#9933ff,stroke-width:1px\n    style F fill:#fff0f5,stroke:#cc3366,stroke-width:1px\n\")\ngraph\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"DiagrammeR html-widget html-fill-item\" id=\"htmlwidget-ef706ee9e509d113995a\" style=\"width:100%;height:464px;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-ef706ee9e509d113995a\">{\"x\":{\"diagram\":\"\\n  flowchart LR\\n    A[üí° Conceptualisation<br/>Define system, agents, hypotheses] --> \\n    B[üß± Implementation<br/>NetLogo model (.nlogo)]\\n    B --> C[üîÑ Version control<br/>Git + GitHub]\\n    C --> D[üß™ Experimentation<br/>BehaviorSpace runs]\\n    D --> E[üìä Analysis<br/>R scripts, plots, stats]\\n    E --> F[üì¢ Publication<br/>Release + Zenodo DOI]\\n    F --> A[üîÅ Revision & new hypotheses]\\n    style A fill:#fef6e4,stroke:#c4a000,stroke-width:1px\\n    style B fill:#e6f3ff,stroke:#2176ff,stroke-width:1px\\n    style C fill:#f0f9f0,stroke:#009900,stroke-width:1px\\n    style D fill:#fff4e6,stroke:#ff8c00,stroke-width:1px\\n    style E fill:#f3e6ff,stroke:#9933ff,stroke-width:1px\\n    style F fill:#fff0f5,stroke:#cc3366,stroke-width:1px\\n\"},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n:::\n:::\n\n\nTreat this as a *living process*: your repository should tell the story of how your model evolved.\n\n---\n\n## 8.2 Tools and services checklist\n\nTo follow best practices, every simulation modeller should maintain a working toolkit and a structured workflow environment. Below is a checklist tailored to this course.\n\n| Category                          | Tool / Service                   | Purpose                                                   | Key Concepts / Skills                                  |\n| --------------------------------- | -------------------------------- | --------------------------------------------------------- | ------------------------------------------------------ |\n| **Version control**               | **Git**                          | Track changes to your project files                       | Commits, branches, merges, history                     |\n|                                   | **GitHub**                       | Host and share repositories online                        | README, issues, pull requests, releases                |\n| **Model implementation**          | **NetLogo**                      | Main platform for building agent-based models             | Interface design, procedures, agents, patches, globals |\n| **Data analysis & visualization** | **R**                            | Process simulation results, generate plots and statistics | R scripts, data frames, ggplot2, tidyverse             |\n| **Interoperability**              | **RNetLogo** (optional)          | Run NetLogo from R for batch experiments                  | Automation, reproducibility                            |\n| **Documentation**                 | **Markdown (.md)**               | Write guides, notebooks, and documentation                | Formatting, headings, links, code blocks               |\n|                                   | **README.md**                    | Front page of your GitHub repository                      | Summary, usage, citation                               |\n| **Reproducible environment**      | **Project folders**              | Organise code, data, results, and docs                    | Clear structure, consistent naming                     |\n| **Collaboration and feedback**    | **GitHub Issues / Discussions**  | Record bugs, ideas, and model questions                   | Issue tracking, commenting                             |\n| **Archival and citation**         | **Zenodo** (later in the course) | Assign a DOI to your final model                          | Versioned release, FAIR principles                     |\n\n### Minimal setup for this course\n\nAfter today and before proceeding to the next sessions, make sure you have:\n\n* [ ] Installed **Git**, **NetLogo**, and **R**. These are present in the lab computers, but it is recommended that you also have these installed in your personal computer.\n* [ ] Created a **GitHub account**.\n* [ ] Configured Git (username, email, SSH key or HTTPS). This is necessary when using version control locally in your computer.\n* [ ] Tested pushing/pulling a simple repository.\n* [ ] Set up a structured folder for your project (e.g., `model/`, `data/`, `results/`, `docs/`) and write a minimal README file.\n\nOptional but recommended:\n\n* [ ] Installed **RStudio** (for R).\n* [ ] Installed **VS Code** (for editing text and code files).\n* [ ] Install GitHub Desktop.\n* [ ] Linked GitHub to Zenodo for future publication.\n\n---\n\n### Summary\n\nA good modeller is a good *steward of code*. The tools are not the goal‚Äîthey are supports for clarity, reproducibility, and collaboration. In this course, you will gradually assemble your own simulation software project, learning to combine conceptual, technical, and organisational skills.\n",
    "supporting": [
      "dev-workflow_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"site_libs/htmltools-fill-0.5.8.1/fill.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/htmlwidgets-1.6.4/htmlwidgets.js\"></script>\n<script src=\"site_libs/d3-3.3.8/d3.min.js\"></script>\n<script src=\"site_libs/dagre-0.4.0/dagre-d3.min.js\"></script>\n<link href=\"site_libs/mermaid-0.3.0/dist/mermaid.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/mermaid-0.3.0/dist/mermaid.slim.min.js\"></script>\n<link href=\"site_libs/DiagrammeR-styles-0.2/styles.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/chromatography-0.1/chromatography.js\"></script>\n<script src=\"site_libs/DiagrammeR-binding-1.0.11/DiagrammeR.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
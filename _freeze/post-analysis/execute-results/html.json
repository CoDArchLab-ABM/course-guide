{
  "hash": "c30c7966a98bc5bdfca778dfe38d043c",
  "result": {
    "engine": "knitr",
    "markdown": "# Analysis of simulation results {#post-analysis}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(readr)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nexperiments_path <- \"assets/netlogo/experiments/Artificial Anasazi_experiments \"\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncolor_mapping <- c(\"historical households\" = \"blue\", \n                   \"simulation households\" = \"darkred\")\n```\n:::\n\n\n## Single run\n\n\n::: {.cell}\n\n```{.r .cell-code}\nexpname <- \"experiment single run\"\n```\n:::\n\n\nRead output:\n\n::: {.cell}\n\n```{.r .cell-code}\nresults_single <- readr::read_csv(paste0(experiments_path, expname, \"-table.csv\"), skip = 6)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 552 Columns: 11\nâ”€â”€ Column specification â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€\nDelimiter: \",\"\nchr (1): map-view\ndbl (9): [run number], fertility, death-age, harvest-variance, fertility-end...\nlgl (1): historic-view?\n\nâ„¹ Use `spec()` to retrieve the full column specification for this data.\nâ„¹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n:::\n\n\nPlot trajectories of metrics:\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_name <- paste0(experiments_path, expname, \"-trajectories.png\")\n\npng(plot_name, width = 840, height = 540)\n\nggplot(results_single) +  \n  geom_line(aes(x = `[step]`, y = `historical-total-households`, color = \"historical data\"),\n            linewidth = 1.2) +\n  geom_line(aes(x = `[step]`, y = `total-households`, color = \"simulation households\"),\n            linewidth = 1.2) +\n  labs(x = \"steps\", y = \"households\") +\n  scale_color_manual(name = \"\", values = color_mapping) +\n  theme(legend.position = \"right\")\n\ndev.off()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nsvg \n  2 \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nknitr::include_graphics(plot_name)\n```\n\n::: {.cell-output-display}\n![](assets/netlogo/experiments/Artificial Anasazi_experiments experiment single run-trajectories.png)\n:::\n:::\n\n\n## Multiple runs in single configuration\n\n\n::: {.cell}\n\n```{.r .cell-code}\nexpname <- \"experiment multiple runs\"\n```\n:::\n\n\nRead output:\n\n::: {.cell}\n\n```{.r .cell-code}\nresults_single <- readr::read_csv(paste0(experiments_path, expname, \"-table.csv\"), skip = 6)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 5520 Columns: 11\nâ”€â”€ Column specification â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€\nDelimiter: \",\"\nchr (1): map-view\ndbl (9): [run number], fertility, death-age, harvest-variance, fertility-end...\nlgl (1): historic-view?\n\nâ„¹ Use `spec()` to retrieve the full column specification for this data.\nâ„¹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n:::\n\n\nPlot trajectories of metrics:\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_name <- paste0(experiments_path, expname, \"-trajectories.png\")\n\npng(plot_name, width = 840, height = 540)\n\nggplot(results_single) +  \n  geom_line(aes(x = `[step]`, y = `total-households`, color = `[run number]`, group = `[run number]`),\n            linewidth = 1.2) +\n  geom_line(aes(x = `[step]`, y = `historical-total-households`), \n            color = color_mapping[\"historical households\"],\n            linewidth = 1.2, linetype = 2) +\n  labs(x = \"steps\", y = \"households\") +\n  theme(legend.position = \"right\")\n\ndev.off()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nsvg \n  2 \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nknitr::include_graphics(plot_name)\n```\n\n::: {.cell-output-display}\n![](assets/netlogo/experiments/Artificial Anasazi_experiments experiment multiple runs-trajectories.png)\n:::\n:::\n\n\n## Parameter exploration - regular intervals\n\n### One parameter\n\n\n::: {.cell}\n\n```{.r .cell-code}\nexpname <- \"experiment harvest adjustment\"\n```\n:::\n\n\nRead output:\n\n::: {.cell}\n\n```{.r .cell-code}\nresults_harvest_adj <- readr::read_csv(paste0(experiments_path, expname, \"-table.csv\"), skip = 6)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 104880 Columns: 11\nâ”€â”€ Column specification â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€\nDelimiter: \",\"\nchr (1): map-view\ndbl (9): [run number], fertility, death-age, harvest-variance, fertility-end...\nlgl (1): historic-view?\n\nâ„¹ Use `spec()` to retrieve the full column specification for this data.\nâ„¹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n:::\n\n\nPlot trajectories of metrics:\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_name <- paste0(experiments_path, expname, \"-trajectories.png\")\n\npng(plot_name, width = 840, height = 540)\n\nggplot(results_harvest_adj) +  \n  geom_line(aes(x = `[step]`, y = `total-households`, color = `harvest-adjustment`, group = `[run number]`),\n            linewidth = 1.2) +\n  geom_line(aes(x = `[step]`, y = `historical-total-households`), color = \"black\",\n            linewidth = 1.2, linetype = 2) +\n  labs(x = \"steps\", y = \"households\") +\n  theme(legend.position = \"right\")\n\ndev.off()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nsvg \n  2 \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nknitr::include_graphics(plot_name)\n```\n\n::: {.cell-output-display}\n![](assets/netlogo/experiments/Artificial Anasazi_experiments experiment harvest adjustment-trajectories.png)\n:::\n:::\n\n\n### Two parameter\n\n\n::: {.cell}\n\n```{.r .cell-code}\nexpname <- \"experiment harvest adjustment variance\"\n```\n:::\n\n\nRead output:\n\n::: {.cell}\n\n```{.r .cell-code}\nresults_harvest_adj <- readr::read_csv(paste0(experiments_path, expname, \"-table.csv\"), skip = 6)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 441600 Columns: 11\nâ”€â”€ Column specification â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€\nDelimiter: \",\"\nchr (1): map-view\ndbl (9): [run number], fertility, death-age, harvest-variance, fertility-end...\nlgl (1): historic-view?\n\nâ„¹ Use `spec()` to retrieve the full column specification for this data.\nâ„¹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n:::\n\n\nPlot trajectories of metrics:\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_name <- paste0(experiments_path, expname, \"-trajectories.png\")\n\npng(plot_name, width = 840, height = 540)\n\nggplot(results_harvest_adj) +  \n  geom_line(aes(x = `[step]`, y = `total-households`, group = `[run number]`),\n            color = color_mapping[\"simulation households\"],\n            linewidth = 1.2) +\n  geom_line(aes(x = `[step]`, y = `historical-total-households`), \n            color = color_mapping[\"historical households\"],\n            linewidth = 1.2, linetype = 2) +\n  facet_grid(`harvest-adjustment` ~ `harvest-variance`) +\n  labs(x = \"steps\", y = \"households\") +\n  theme(legend.position = \"right\")\n\ndev.off()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nsvg \n  2 \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nknitr::include_graphics(plot_name)\n```\n\n::: {.cell-output-display}\n![](assets/netlogo/experiments/Artificial Anasazi_experiments experiment harvest adjustment variance-trajectories.png)\n:::\n:::\n\n\n## Use of machine learning for sensitivity analysis\n\nTo evaluate the importance of each parameter in a simulation model, **Random Forest (RF)** can be used as a feature importance estimator. This involves training an RF model on simulation results and then analyzing the impact of each input parameter on the output.\n\n### Step-by-Step Guide to Using Random Forest for Parameter Importance\n\n**1. Generate Simulation Data**\nThe first step is to generate simulation results by systematically sampling multiple parameters using methods like **Random Sampling, Latin Hypercube Sampling (LHS), or Sobol Sampling**.\n\n**Example: Generating Simulation Data in R**\n```r\n# Load required libraries\nlibrary(lhs)        # For Latin Hypercube Sampling\nlibrary(randtoolbox) # For Sobol Sampling\n\nset.seed(123)\nn <- 500  # Number of samples\nk <- 5    # Number of parameters\n\n# Generate Latin Hypercube sampled input parameters\nparam_samples <- randomLHS(n, k)\ncolnames(param_samples) <- paste0(\"param\", 1:k)\n\n# Assume a simple simulation model (e.g., sum of squared params)\nsimulation_results <- rowSums(param_samples^2)\n\n# Convert to data frame\nsim_data <- data.frame(param_samples, Output = simulation_results)\n\nhead(sim_data)\n```\nðŸ“Œ **Note:** Replace `simulation_results` with the actual simulation output.\n\n**2. Train a Random Forest Model**\n\nOnce the data is prepared, an RF model can be trained using **randomForest** in R.\n\n**Train the RF Model**\n```r\nlibrary(randomForest)\n\n# Train Random Forest to predict simulation output\nset.seed(123)\nrf_model <- randomForest(Output ~ ., data = sim_data, importance = TRUE, ntree = 500)\n\n# Print model summary\nprint(rf_model)\n```\nðŸ“Œ **Explanation:**\n\n- `Output ~ .` means the RF model uses all parameters to predict the output.  \n- `importance = TRUE` ensures that feature importance is computed.  \n- `ntree = 500` sets the number of trees in the forest.  \n\n**3. Extract Parameter Importance**\n\nAfter training, RF provides two types of **feature importance**:\n1. **Mean Decrease in Accuracy** (MDA) â€“ Measures how much accuracy drops when a parameter is randomly shuffled.\n2. **Mean Decrease in Gini** (MDG) â€“ Measures how much each variable contributes to reducing node impurity in the decision trees.\n\n**Plot Feature Importance**\n```r\n# Extract importance values\nimportance_values <- importance(rf_model)\n\n# Convert to a data frame\nimportance_df <- data.frame(Parameter = rownames(importance_values),\n                            MDA = importance_values[, 1], \n                            MDG = importance_values[, 2])\n\n# Print importance scores\nprint(importance_df)\n\n# Plot feature importance\nlibrary(ggplot2)\nggplot(importance_df, aes(x = reorder(Parameter, -MDA), y = MDA)) +\n  geom_bar(stat = \"identity\", fill = \"steelblue\") +\n  labs(title = \"Feature Importance (Mean Decrease in Accuracy)\",\n       x = \"Parameter\", y = \"Importance\") +\n  theme_minimal()\n```\nðŸ“Œ **Interpretation:**\n- **Higher MDA values** indicate more important parameters (greater accuracy drop when shuffled).\n- **Higher MDG values** mean stronger contributions to splitting decisions in trees.\n\n**4. Interpret the Results**\n\nAfter analyzing feature importance:\n- **Key parameters** can be identified for further refinement.\n- **Unimportant parameters** can be removed to simplify the model.\n- **Interactions between parameters** can be explored.\n\n---\n\n**Summary**\n| Step | Action |\n|------|--------|\n| **1** | Generate parameter samples using LHS, Sobol, or Random Sampling |\n| **2** | Run simulations to obtain output values |\n| **3** | Train a Random Forest model using `randomForest` |\n| **4** | Extract feature importance using `importance()` |\n| **5** | Interpret and visualize the results |\n\nExample: [@angourakis_human-plant_2022]\n\n## Use of machine learning for parameter callibration\n\n(TO-DO)\n\n## Use of machine learning for model selection\n\nExample: [@carrignon_tableware_2020]\n",
    "supporting": [
      "post-analysis_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
{"title":"Identifying and formatting submodels","markdown":{"headingText":"Identifying and formatting submodels","headingAttr":{"id":"pond-trade-submodelling","classes":[],"keyvalue":[]},"containsRefs":false,"markdown":"\nIn the early stages of model development, it is common to work within a **single `.nlogo` file**. This approach keeps all code—setup, agent logic, data collection, and plotting—in one place, which is convenient for learning and experimentation. However, as models grow in complexity, maintaining a long monolithic file becomes difficult.\nTo make large projects easier to navigate, debug, and extend, **NetLogo allows modularisation** through the `__includes` directive.\n\n## 🔹 Why Modularise?\n\nBreaking a model into smaller source files improves:\n\n* **Readability:** Each file focuses on a specific function (e.g., setup, environment, agent behaviour, data collection).\n* **Reusability:** Procedures can be shared across projects.\n* **Maintenance:** Updating or replacing a subsystem (e.g., weather generation) doesn’t require scrolling through hundreds of lines.\n* **Collaboration:** Multiple researchers can work on separate components concurrently.\n\nThese have great consequences for supporting **transparent and replicable research**. Instead of one opaque model file, a modular structure makes explicit where, for example, environmental data, agent rules, or calibration routines are defined—facilitating peer review, teaching, and long-term model reuse.\n\n## 🔹 The `__includes` Directive\n\nNetLogo allows a model to load additional source files (`.nls`, for *NetLogo Source*) at runtime.\nThe syntax, placed at the top of your main `.nlogo` file, is:\n\n```netlogo\n__includes [\n  \"modules/setup.nls\"\n  \"modules/agents.nls\"\n  \"modules/environment.nls\"\n  \"modules/data_collection.nls\"\n]\n```\n\n>*NOTE: Storing these files in a subdirectory, like 'modules', is not a requirement, but it will be preferable if the model directory contains anything besides a single `.nlogo` file (e.g., input or output data files, documentation, etc).*\n\nEach included file may contain any NetLogo code (procedures, reporters, variable declarations). They could even correspond to a single element each (e.g., \"setup.nls\" containing only the `setup` procedure). The criteria for splitting those elements and naming the files is ultimately for you to decide. You should aim to have not too much nor too little code in files, but this is no golden rule and there are many instances where grouping or separating elements is more desirable. Using a combination of function (e.g., \"setup\", \"data collection\"), object (e.g., \"patches\", a given breed of agent) and topic (e.g., vegetation growth, movement, communication) can make good intermediate solutions. Remember the reasons for going modular and think in terms of what helps you pursuing them.\n\nWhen the model (`.nlogo` file) loads, all included `.nls` files are **merged into a single shared namespace**, so procedures defined in one file are visible to all others. You may also consult and modify the source code directly in NetLogo since, once loaded, they will appear in the drop down list at the top of the \"Code\" tab.\n\n## Breaking Down The Pond Trade Model\n\nTo break down the **Pond Trade** model developed within one `.nlogo` file, we can refactor it into modules stored in a structured directory, for example:\n\n```\nPondTrade/\n├── PondTrade.nlogo              ; main file (interface + globals + includes)\n└── modules/\n    ├── main.nls                 ; stricly, setup and go procedures\n    ├── map.nls                  ; Map and terrain generation\n    ├── output.nls               ; Plotting, displays, outputs, and computing model statistics\n    ├── routes.nls               ; Route calculation, pathfinding, and connectivity logic.\n    ├── settlements.nls          ; Creating and managing settlements\n    └── traders.nls              ; trader creation, activation, movement, and trading logic\n```\n\nInside the main model:\n\n```netlogo\n__includes [\n  \"modules/PondTrade/main.nls\"\n  \"modules/PondTrade/map.nls\"\n  \"modules/PondTrade/settlements.nls\"\n  \"modules/PondTrade/routes.nls\"\n  \"modules/PondTrade/traders.nls\"\n  \"modules/PondTrade/output.nls\"\n]\n```\n\nEach `.nls` file then contains code that is more closely related, even though they are inevitably connect to others. For example, `map.nls` stores `create-map` and `smooth-coast-line`, but while `smooth-coast-line` is only called by `create-map`, `create-map` in turn is called by `setup`.\n\nThis structure makes it easier to focus on specific model components, understand or modify them, without being overwhelmed by the entire codebase.\n\n### 🔹 Shared Utilities\n\nAll included files share the same namespace.\nTherefore, **utility functions**—such as `clamp01` or `random-between`—can be stored in a shared file (e.g., `root/utils/clamp.nls`) and referenced in the main `__includes` list:\n\n```netlogo\n__includes [\n  \"../utils/clamp.nls\"\n  \"modules/setup.nls\"\n  \"modules/trade.nls\"\n  \"modules/data.nls\"\n]\n```\n\nThese utilities will then be available to all modules, even though `.nls` files cannot themselves include other `.nls` files.\n\n## ⚒️ Refactoring for a better modularity\n\nOnce we split our code into logical parts, we might already gain some useful insights about how to better respect modularity without changing the code behaviour. We have one such a case in `map.nls`. Here is the call paths involving the two procedures in this file:\n\n```{r, echo=FALSE}\nDiagrammeR::grViz('digraph procedureCalls {\n  node [style=filled];\n    \n\n  subgraph cluster_map {\n    label = \"map\";\n    color=blue\n    smooth [label=\"smooth-coast-line\"];\n    create [label=\"create-map\"];\n  }\n\n  subgraph cluster_main {\n    label = \"main\";\n    node [style=filled];\n    color=red\n    setup;\n    go;\n  }\n  \n  subgraph cluster_routes {\n    label=\"routes\";\n    node [style=filled];\n    color=green\n    topproc [label=\"...\"];\n    assignpc [label=\"assign-path-cost\"];\n    bottomproc [label=\"...\"];\n  }\n  \n  \n  create -> setup;\n  smooth -> create;\n  topproc -> setup;\n  bottomproc -> go;\n  assignpc -> create;\n}')\n```\n\nWe can see that `assign-path-cost` has a somewhat ambiguous position: it is clearly related to route calculation, but it is actually called in `map`, inside `create-map`, not in another procedure in `routes` or directly in `setup`. \n\n```\nto create-map\n\n  ...\n  \n  smooth-coast-line\n\n  assign-path-cost\n\n  ask patches [ paint-terrain ]\n\nend\n```\n\nThis makes our code a \"spaghetti code\". The refactoring measure that can solve this is straightforward: we move the call for `assign-path-cost` from `create-map` to `setup`. Since it was already positioned at the end of `create-map`, moving it immediately following the call for `create-map` in `setup` will not change the model behaviour. The cost is simply a slightly longer setup procedure.\n\n```\nto setup\n\n  clear-all\n  reset-ticks\n\n  ; set the random seed so we can reproduce the same experiment\n  random-seed seed\n  \n  set patchesCount count patches\n\n  create-map\n  \n  assign-path-cost\n\n  create-coastal-settlements\n\n  set-routes\n\n  create-traders-per-settlement\n\n  update-output\n\n  update-display\n\n  update-plots\n\nend\n```\n\nRefactoring is a process that never finishes. Do you see any other improvements to our implementation of the model so far? If so, please try them and if successful, create a pull request with your changes to our course-guide repository.\n\n## 🔹 Alternative Organisation Options\n\nWhile `__includes` is the standard and simplest way to modularise code *within* NetLogo, larger or data-intensive projects can also benefit from:\n\n* **Extensions:** Custom primitives written in Java or Scala for reusable functionality across models.\n* **External scripting:** Coordinating model runs from R (via *RNetLogo*) or Python (via *pyNetLogo*), keeping analysis and simulation control outside NetLogo.\n* **Versioned templates:** Using Git and folders (e.g., `/modules/`, `/data/`, `/docs/`) for collaborative development and reproducibility.\n\n---\n\n## 🧠 Activity: Refactor the *Artificial Anasazi* Model Using `__includes`\n\n### 🎯 **Learning Objective**\n\nBy the end of this exercise, students will:\n\n* Understand how to break a NetLogo model into functional modules.\n* Learn how to organise model code for clarity, maintenance, and reuse.\n* Recognise how modularisation supports reproducible archaeological modelling.\n\n---\n\n### 🪣 **Background**\n\nYou have been working with the **PondTrade** model as a single `.nlogo` file containing setup, agent behaviour, environment rules, and data collection.\nIn this activity, you will restructure it into a modular design using NetLogo’s `__includes` feature.\n\n---\n\n### 🧩 **Step 1 — Create the Folder Structure**\n\n1. Make a new directory called `PondTrade_Modular/`.\n2. Inside it, create the following subfolders:\n\n   ```\n   PondTrade_Modular/\n   ├── PondTrade.nlogo\n   └── modules/\n       ├── setup.nls\n       ├── turtles.nls\n       ├── environment.nls\n       ├── trade.nls\n       ├── data.nls\n       └── utils.nls\n   ```\n3. Copy your original model interface (sliders, plots, switches) into `PondTrade.nlogo`.\n\n---\n\n### ⚙️ **Step 2 — Add the `__includes` Statement**\n\nAt the very top of `PondTrade.nlogo`, add:\n\n```netlogo\n__includes [\n  \"modules/setup.nls\"\n  \"modules/turtles.nls\"\n  \"modules/environment.nls\"\n  \"modules/trade.nls\"\n  \"modules/data.nls\"\n  \"modules/utils.nls\"\n]\n```\n\nThis tells NetLogo to merge all these modules into one program when the model is loaded.\n\n---\n\n### ✂️ **Step 3 — Split the Code**\n\nNow open your original single-file model and **move procedures** into the appropriate module files.\n\n| Type of Procedure                     | Move it to file   | Example                                                   |\n| ------------------------------------- | ----------------- | --------------------------------------------------------- |\n| World setup and initialization        | `setup.nls`       | `to setup`, `to create-turtles`                           |\n| Agent behaviour (movement, decisions) | `turtles.nls`     | `to go`, `to forage`, `to trade`                          |\n| Environment updates                   | `environment.nls` | `to update-water`, `to grow-resources`                    |\n| Trade and interaction logic           | `trade.nls`       | `to exchange-goods`, `to evaluate-partner`                |\n| Data collection and plotting          | `data.nls`        | `to record-stats`, `to export-csv`                        |\n| Helper and math functions             | `utils.nls`       | `to-report clamp01 [x]`, `to-report random-between [a b]` |\n\nRemember — **you do not need to re-declare globals** or interface variables in every file.\nAll modules share the same namespace once included.\n\n---\n\n### 🧪 **Step 4 — Test the Modular Model**\n\n1. Open `PondTrade.nlogo` in NetLogo.\n2. Check that it runs exactly like the original version.\n3. If an error appears such as *“Nothing named CLAMP01”*, ensure that the file containing that procedure (`utils.nls`) is listed in the `__includes`.\n\n---\n\n### 💬 **Step 5 — Reflect and Discuss**\n\nConsider these questions:\n\n* How does splitting the model help you identify its components conceptually (e.g. agents, environment, data)?\n* Which part of the model would you expect to change most often during an archaeological experiment?\n* How does modular organisation support collaboration between researchers (e.g. environmental scientist, archaeologist, and programmer)?\n* How might this approach make the model easier to archive, cite, or share for reproducibility?\n\n---\n\n### 📚 **Optional Extension**\n\nExplore alternative code organisation options:\n\n* Create a reusable `utils` folder shared by multiple models.\n* Call NetLogo models externally from R or Python using **RNetLogo** or **pyNetLogo** for automated experiments.\n* Package frequently used model components as **NetLogo extensions** (Java/Scala).\n\n---\n\n### 🏺 **Summary**\n\nBy modularising your model, you have:\n\n* Improved **readability** and **traceability** of the code.\n* Created a structure that supports **collaboration** and **replication**.\n* Taken an important step toward **professional-level model documentation** in computational archaeology.\n","srcMarkdownNoYaml":""},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"svg","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":"auto","echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["assets/styles.css"],"output-file":"pond-trade-modularity.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.7.32","bibliography":["references.bib"],"comments":{"hypothesis":true},"theme":"lumen"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}
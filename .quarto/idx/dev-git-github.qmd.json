{"title":"Git and GitHub","markdown":{"headingText":"Git and GitHub","headingAttr":{"id":"dev-git-github","classes":[],"keyvalue":[]},"containsRefs":false,"markdown":"\n## Version-control and Git\n\n### Version control: general concept and its usefulness  \n\nVersion control is a system that helps track and manage file changes over time. It’s widely used in software development, but its applications extend to any field where file management is essential, including document editing, research, and project management. At its core, version control provides a historical record of changes. It allows users to revert to previous versions, identify when and why changes were made, and work collaboratively without the risk of overwriting each other’s work.\n\nThere are two main types of version control: centralized and distributed. Centralized version control systems, such as Subversion (SVN), store files in a central repository. Users check out files, make changes, and then commit them back to the central repository. While effective, centralized systems can be vulnerable if the central server fails. Distributed version control systems, like Git, address this by allowing every user to have a complete copy of the repository on their local machine. This setup enhances collaboration and provides redundancy, as users can work offline and synchronize changes with others when connected.\n\n<figure>\n<a title=\"Jason Long, CC BY 3.0 &lt;https://creativecommons.org/licenses/by/3.0&gt;, via Wikimedia Commons\" href=\"https://commons.wikimedia.org/wiki/File:Git_icon.svg\"><img width=\"64\" alt=\"Git icon\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/3/3f/Git_icon.svg/64px-Git_icon.svg.png?20220905010122\"></a>\n<fig-caption>Git icon</fig-caption>\n</figure>\n\n### Benefits of Version Control\n\n- *Collaboration*: Version control systems make collaboration easier and more efficient by allowing multiple users to simultaneously work on the same project. With distributed systems like Git, branches can be created for different features or tasks, and changes can later be seamlessly merged into the main project. This enables teams to work independently and minimize conflicts.\n\n- *Historical Tracking*: Version control systems keep a detailed history of all changes made to the files. This allows users to see who made changes, when, and why. If an issue arises, it’s possible to revert to a previous state without losing any data, making debugging easier.\n\n- *Backup and Redundancy*: In distributed systems, each user’s local copy is a backup of the entire project. This redundancy reduces the risk of data loss due to server failures or other issues and allows users to work offline and sync changes later.\n\n- *Version Management*: Version control systems assign unique identifiers to each change, per commit and file changed, usually called \"Git hash\" or “commit hash”. A Git hash a 40-character hexadecimal string, such as 2d3acf90f35989df8f262dc50beadc4ee3ae1560, derived from the contents of the commit, including its parent commit(s), timestamp, and author details [REF]. These identifiers allow users to switch between different versions of the project easily. It’s also possible to create branches for experimental features and merge them with the main project once they’re stable, facilitating smoother integration of new features.\n\n- *Enhanced Workflow*: Many version control systems support automated processes such as Continuous Integration (CI) and Continuous Deployment (CD), which streamline development and testing. These systems can automatically test changes before they are merged, ensuring higher code quality and reducing the risk of introducing bugs.\n\nOverall, version control systems are crucial tools in modern project management and development workflows. They enable collaboration, ensure data integrity, and improve productivity by providing a structured approach to managing changes in any type of project.\n\nGet a short introduction to Git by watching the official Git Documentation videos [here](https://git-scm.com/videos). \n\n## Git terminology\n\nHere are some essential Git terms to know:\n\n::: {layout=\"[[2,1], [1]]\"}\n\n- **Repository**: A storage space for your project files and their history. Repositories can be local (on your computer) or remote (on platforms like GitHub).\n  \n- **Initialise**: configure a specific local directory (your \"working directory\") as a local repository by creating all necessary files for Git to work.\n\n- **Add**/**Stage**: adds a change in the working directory to the staging area, telling Git to include updates to a particular file in the next commit. However, adding or staging doesn't really affect the repository since changes are not actually recorded until they are committed (see below).\n\n<a title=\"Cmglee, CC BY-SA 3.0 &lt;https://creativecommons.org/licenses/by-sa/3.0&gt;, via Wikimedia Commons\" href=\"https://commons.wikimedia.org/wiki/File:Git_data_flow_simplified.svg\"><img width=\"256\" alt=\"Git data flow simplified\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/4/44/Git_data_flow_simplified.svg/256px-Git_data_flow_simplified.svg.png?20120710215449\"></a>\n\n:::\n\n- **Commit**: A snapshot of changes in the repository. Each commit has a unique ID, allowing you to track and revert changes as needed [[1](https://git-scm.com/docs/gitglossary)].\n\n- **Branch**: A separate line of development. The default branch is usually called `main` or `master`. Branches allow you to work on features independently before merging them into the main project [[2](https://www.pluralsight.com/resources/blog/cloud/git-terms-explained)].\n\n- **Merge**: The process of integrating changes from one branch into another. Typically, this involves merging a feature branch into the main branch.\n\n- **Pull**: A command that fetches changes from a remote repository and merges them into your local branch, ensuring your local work is up-to-date with the remote [[2](https://www.pluralsight.com/resources/blog/cloud/git-terms-explained)].\n\n- **Push**: Uploads your commits from the local repository to the remote repository, making your changes available to others.\n\nUnderstanding these terms is crucial for effective Git usage and collaboration in any project.\n\n::: {.callout-note collapse=\"true\"}\n#### See also\n\n- @noauthor_git_nodate-1  \n- @noauthor_git_nodate-2  \n\n:::\n\n::: {.callout-caution  collapse=\"true\"}\n## CHECK: Git software installation {.unnumbered}\n\nTo verify if Git is installed on your machine, follow these steps:\n\n1. **Open Command Prompt** (Windows 10 or 11)\n   - Press `Win + R`, type `cmd`, and hit Enter.\n   - Alternatively, you can search for \"Command Prompt\" in the Start menu and select it.\n\n2. **Check for Git**\n   - In the Command Prompt window, type the following command and press Enter:\n     ```bash\n     git --version\n     ```\n   - If Git is installed, you will see the installed version, e.g., `git version 2.34.1`.\n   - If Git is not installed, you will receive an error message or see that the command is unrecognized. You can download the installer from [git-scm.com](https://git-scm.com) and follow the installation instructions.\n\n:::\n\n## GitHub\n\n### What is GitHub?\n\nGitHub is a cloud-based platform that enables developers to store, manage, and collaborate on code repositories. It builds on Git, a version control system, by adding collaborative features like pull requests, issue tracking, and discussions, which make it easier for teams to work together on software projects. \n\nGitHub also offers hosting for open-source projects, allowing anyone to contribute or review code. With integrations for CI/CD, project management tools, and documentation, GitHub is a popular choice for developers worldwide to manage both personal and professional projects.\n\n<figure>\n<a title=\"GitHub Inc., MIT &lt;http://opensource.org/licenses/mit-license.php&gt;, via Wikimedia Commons\" href=\"https://commons.wikimedia.org/wiki/File:Octicons-mark-github.svg\"><img width=\"64\" alt=\"Octicons-mark-github\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/9/91/Octicons-mark-github.svg/512px-Octicons-mark-github.svg.png?20180806170715\"></a>\n<fig-caption>GitHub icon</fig-caption>\n</figure>\n\n\n::: {.callout-caution  collapse=\"true\"}\n## CHECK: GitHub user and GitHub Desktop installation {.unnumbered}\n\n### Check GitHub Desktop Installation {.unnumbered}\nTo verify that GitHub Desktop is installed:\n\n- On **Windows**: Go to the Start menu, search for \"GitHub Desktop,\" and open the app. If it launches successfully, GitHub Desktop is installed.\n- On **macOS**: Use Spotlight Search (`Cmd + Space`), type \"GitHub Desktop,\" and press Enter. If the app opens, it is installed.\n\nIf you don’t have GitHub Desktop, you can download it from [desktop.github.com](https://desktop.github.com) and follow the installation instructions [[1](https://docs.github.com/en/desktop/installing-and-authenticating-to-github-desktop/installing-github-desktop)][[2](https://docs.github.com/en/desktop/installing-and-authenticating-to-github-desktop/setting-up-github-desktop)].\n\n### Verify GitHub User {.unnumbered}\nTo check if you are signed in as a GitHub user:\n\n- Open **GitHub Desktop**.\n- Go to **File > Options** (on Windows) or **GitHub Desktop > Preferences** (on macOS).\n- Under the **Accounts** tab, you should see your GitHub username and avatar if you are signed in. If not, you can sign in with your GitHub credentials here.\n\n### Bookmark your GitHub user profile page {.unnumbered}\nIn your Internet browser, make sure that your own GitHub user profile page is saved in Bookmarks for easy access later. \n\n:::\n\n### GitHub terminology\n\nUnderstanding the core vocabulary associated with GitHub operations can help users make the most of this platform, especially for collaborative or open-source projects. Here are some key concepts to keep in mind:\n\n- **Forking**: Forking creates a personal copy of someone else’s GitHub repository in your account. It allows users to experiment with changes without affecting the original repository, and is often used to contribute to open-source projects. After forking, developers can freely modify their own versions and submit a pull request to propose these changes to the original repository if they have improvements or fixes to offer.\n\n- **Cloning**: Cloning involves creating a local copy of a repository on your machine. By cloning a repository, users can work offline and change files that can later be pushed back to the GitHub repository. This process is essential for local development, allowing users to commit changes and manage their workflow effectively with Git commands.\n\n- **Pull Requests**: A pull request (PR) is a way to propose changes in a repository. After modifying a forked or branched version of a repository, a developer can open a pull request, which initiates a review process. This feature is central to collaboration on GitHub, allowing others to review, discuss, and approve proposed changes before they are merged into the main branch.\n\n- **Branching**: A branch is a parallel version of the repository within the same repository structure. By branching, developers can isolate work on different features or fixes without altering the main project files. For example, many projects have a main or master branch for the official release version, while other branches are used for development or testing. Branches are typically merged into the main branch once they are finalized.\n\n- **Commits and Push**: A commit is a snapshot of changes in the repository. Every commit includes a message describing the changes, and each commit builds upon previous ones, creating a history of the repository's development. Pushing is uploading these commits to GitHub from a local repository. After a series of commits on a local branch, a user can push these changes to the corresponding branch on GitHub to keep the remote repository up-to-date.\n\n- **Gists**: A gist is a simple way to share code snippets or single files. Gists can be public or secret, and they are particularly useful for sharing configuration files or code examples. Users can fork and edit Gists, making them a lightweight collaboration and code-sharing tool.\n\n- **Issues and Discussions**: Issues are GitHub’s built-in tracking system for bugs, tasks, and feature requests. They allow users to report problems, suggest new features, and engage in conversations related to the project. Discussions provide a more open forum-style setting for broader conversation, enabling users to share ideas, ask questions, and contribute knowledge that might not directly relate to specific code changes.\n\n::: {.callout-note collapse=\"true\"}\n#### See also\n\n- @noauthor_cloning_nodate  \n- @noauthor_github_nodate  \n- @noauthor_how_2023  \n- @noauthor_difference_2021  \n\n:::\n\n### Working with GitHub\n\nGitHub offers various workflows to manage repositories. Here are three common methods:\n\n::: {.callout-note collapse=\"true\"}\n#### Local with GitHub Desktop {.unnumbered}\n\nFor those who prefer a graphical user interface (GUI):\n\n**Cloning a Repository**\n\n- Open GitHub Desktop.  \n- Go to File > Clone Repository.  \n- Select the repository and click \"Clone.\"\n\n**Creating a New Branch**\n\n- Click on the \"Current Branch\" dropdown.  \n- Select \"New Branch,\" name it, and click \"Create Branch.\"\n\n**Making Changes**\n\n- Edit files in your editor.\n\n**Committing Changes**\n\n- Return to GitHub Desktop.  \n- Stage changed files by ticking the boxes.  \n- Write a summary of changes and click \"Commit to new-branch.\"\n\n**Pushing Changes**\n\n- Click \"Push origin\" to upload your changes.\n\n:::\n\n::: {.callout-note collapse=\"true\"}\n#### Remote with Web Browser {.unnumbered}\nYou can also work directly on GitHub.com:\n\n**Forking a Repository**\n\n- Go to the repository page. \n- Click on the Fork button in the top-right corner of the page.  \n- Choose an owner (user or organisation), a name and description for the new fork repository. The default will always be a exact copy of the original repository. Select whether to copy only the main branch. Click \"Create fork\".  \n\n**Cloning a Repository**\n\n- Go to the repository page.  \n- Click the green \"Code\" button and continue the cloning process locally, using console commands (copying link) or with GitHub Desktop.\n\n**Creating a New Branch**\n\n- Click the branch dropdown on the main page.  \n- Type a new branch name and click \"Create branch.\"\n\n**Making Changes**\n\n- Navigate to the file (and branch) you want to edit.  \n- Click the pencil icon to edit.  \n- Make your changes and scroll down to the \"Commit changes\" section.\n\n**Committing Changes**\n\n- Enter a commit message.  \n- Choose whether to \"commit directly to main\" or \"Commit to a new branch...\".\n\n**Pushing Changes**\n\n(No push is needed as changes are automatically saved to GitHub.)\n\n:::\n\n::: {.callout-note collapse=\"true\"}\n#### Local with Console Commands (advanced users) {.unnumbered}\n\nTo work with Git via the command line:\n\n**Navigate to the directory to hold the local copy**\n```bash\ncd path/to/local/directory\n```\n\n**Cloning a Repository**\n```bash\ngit clone https://github.com/username/repository.git\n```\n\n**Creating a New Branch**\n```bash\ngit checkout -b new-branch\n```\n\n**Making Changes**\nEdit files in your favorite text editor or IDE.\n\n**Committing Changes**\n```bash\ngit add .\ngit commit -m \"Describe your changes\"\n```\n\n**Pushing Changes**\n```bash\ngit push origin new-branch\n```\n\n:::\n\nThese workflows enable flexibility in how you manage your projects on GitHub.\n\n### Markdown (GitHub-flavoured)\n\nWhen Markdown files (.md) are placed in a GitHub repository, they will be automatically rendered within GitHub web interface by default, while the raw code can still be seen and edited in Markdown.\n\nThere are some particularities about how Markdown files will be rendered in GitHub through Internet browsers. Consult [GitHub Docs](https://docs.github.com/en/get-started/writing-on-github/getting-started-with-writing-and-formatting-on-github/basic-writing-and-formatting-syntax) for knowing more about them.\n\n### How to organise repositories\n\nWhen structuring your repositories, following some common conventions for organizing files in subdirectories is helpful. This makes projects more readable and more accessible for others to navigate. Here are some commonly used subdirectories:\n\nWhen software development is a significant part:  \n* `source/` or `src/`: Contains the main source code for the project.  \n* `documentation/`, `docs/`, or `doc/`: Stores documentation, such as guides or API references.  \n* `tests/`: Includes test scripts to ensure code functionality.  \n* `bin/`: Holds executable scripts or binaries.  \n* `config/`: Contains configuration files, like YAML or JSON.  \n\nWhen rendering a document or a graphical user interface, such as LaTeX documents, websites, web apps, or video games:  \n* `assets`: to hold files and subdirectories with closed content and functionality files.  \n  * `assets/images/`, `assets/media/`, etc.: Holds all images or other media files generated externally (not by the repository's source code).  \n  * `assets/styles.css` or `assets/css/`: all CSS code for formatting HTML objects.  \n  * `assets/js/`: JavaScript source code enabling interactive functionalities (it would also apply for other programming languages in similar position). Source code of this kind might also be placed inside the source code folder, if present.  \n\nThese folder structures are conventions and not strict rules. You can adapt or modify them based on your project's needs. \n\nThere are several community-based proposals for standards, including tools that can help automate the creation of a new project directory with conventional files. For example, for a typical Data Science project using Python see [Cookiecutter Data Science](https://github.com/drivendataorg/cookiecutter-data-science).\n\n::: {.callout-note collapse=\"true\"}\n#### See also\n\n- @jimmy_how_2022  \n- @zestyclose-low-6403_how_2023  \n- @danijar_can_2019 \n- @suhail_structuring_2024   \n- @cioara_how_2018  \n\n:::\n\n### Conventional files\n\n  * `README.md`: Provides an overview of the project, including what it does, how to set it up, and how to contribute. A few sections examples are:  \n    * General description  \n    * Authors and/or contributors  \n    * Acknowledgements  \n    * Funding  \n    * Installation or use instructions  \n    * Contributing  \n  * `LICENSE`: Specifies the terms under which the content of the repository can be used, modified, and distributed. There are many licenses, varying in *permissiveness* and *type of content*. Generally, for projects involving both code and other kinds of content, we recommend CC0-1.0 or MIT. See [https://choosealicense.com/](https://choosealicense.com/) and [GitHub Docs](https://docs.github.com/en/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/licensing-a-repository)). \n  * `CITATION.cff`: human- and machine-readable citation information for software (and datasets). See example [here](https://citation-file-format.github.io/#:~:text=cff%20file%3F-,CITATION.,to%20correctly%20cite%20their%20software.).  \n  * `.gitignore`: Lists files and directories that Git should ignore, such as build outputs and temporary files.  \n  * `CHANGELOG.md`: This file logs a chronological record of all notable changes made to the project, often following conventions like Conventional Commits.  \n  * `references.bib`: a file containing references in BibTex format, which can be cited within the markdown files of the repository.  \n\n### Version Tags and Releases on GitHub\n\nTo manage different versions of your project, GitHub allows you to create **tags** and **releases**:\n\n1. **Create a Tag**:\n   - Open your repository on GitHub and navigate to the **Releases** section.\n   - Click **Draft a new release**.\n   - In the **Tag version** field, type a version number (e.g., `v1.0.0`) to create a new tag (see more in the note below).\n   - Specify the target branch or commit for this tag.\n\n2. **Create a Release**:\n   - After tagging, enter details such as the release **title** and **description**.\n   - Optionally, add **release notes** to summarize changes or new features [[1](https://docs.github.com/en/repositories/releasing-projects-on-github/automatically-generated-release-notes)].\n   - Click **Publish release** to make it public.\n\nReleases are tied to tags and provide a stable reference for each version, making it easy for users to download specific versions of your project [[2](https://stackoverflow.com/questions/19727632/how-to-handle-releases-of-markdown-document-on-github)].\n\n::: {.callout-note collapse=\"true\"}\n#### About versioning {.unnumbered}\n\nIf unfamiliar with the logic behind versioning, consult the reference to [Semantic Versioning](https://semver.org/), which can also be found on the right of the \"Create a new release\" page in GitHub. Their summary states:\n\n> Given a version number MAJOR.MINOR.PATCH, increment the:  \n> 1. MAJOR version when you make incompatible API changes  \n> 2. MINOR version when you add functionality in a backward compatible manner  \n> 3. PATCH version when you make backward compatible bug fixes  \n\nHowever, if your repository is not about creating software products and services, we can do well by simply obeying a few general conventions:\n\n* Add a PATCH version **discretionally** when correcting bugs, typos, tuning aesthetics, etc, or *refactoring* code (explained in @sec-r-programming).\n* Add a MINOR version when expanding code functionality or adding new content (text sections, images)\n* Add a new PATCH or MINOR version every time the repository reaches a natural stable point (i.e., there are no changes planned any time soon).\n* Make sure that every new MAJOR version is released (GitHub) and published (Zenodo, see below).  \n\n:::\n\n::: {.callout-note collapse=\"true\"}\n#### See also\n\n- @noauthor_creating_2024 \n- @noauthor_automatically_nodate  \n- @signell_how_2013  \n:::\n\n### Establishing a GitHub-Zenodo Connection\n\nTo link your GitHub repository with Zenodo and enable citation via DOI:\n\n1. **Login to Zenodo**: Go to [Zenodo](https://zenodo.org) and sign in or create an account.\n2. **Authorize GitHub Access**:\n   - Click on your profile in Zenodo and select **Linked accounts**.\n   - Choose **Connect** next to GitHub.\n   - You will be redirected to GitHub to authorize Zenodo’s access. Approve the request to complete the connection.\n3. **Select Repository for DOI Generation**:\n   - In Zenodo, navigate to **GitHub** in the **Linked Accounts** section.\n   - Enable DOI generation for the desired repository. Zenodo will automatically mint DOIs for any new release you publish.\n\nThis connection allows you to generate and manage DOIs for GitHub repositories, enhancing your project’s citation and research accessibility.\n\n::: {.callout-note collapse=\"true\"}\n#### See also\n\n- @noauthor_referencing_nodate  \n- @noauthor_zenodo_nodate  \n- @noauthor_created_nodate  \n- @noauthor_module-5-open-research-software-and-open-sourcecontent_developmenttask_2md_nodate  \n- @noauthor_issue_nodate  \n:::\n","srcMarkdownNoYaml":""},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"svg","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":"auto","echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["assets/styles.css"],"output-file":"dev-git-github.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.7.32","bibliography":["references.bib"],"comments":{"hypothesis":true},"theme":"lumen"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}
{"title":"Implementing complex agents","markdown":{"headingText":"Implementing complex agents","headingAttr":{"id":"pond-trade-cultural-vectors","classes":[],"keyvalue":[]},"containsRefs":false,"markdown":"\n## Second-tier model\n\nWe will now go over the implementation of the second-tier PondTrade model (steps 10 to 13). The pace in this section will be significantly faster. I ask you only to comprehend the main aspects added at each step and concern yourself only with the files already in the root directory.\n\nRemember the conceptual model for this tier, as we defined back at the beginning.\n\n![Pond Trade conceptual model at start (second tier)](images/0_conceptAtStart_secondTier.png)  \n*Pond Trade conceptual model at start (second tier)*\n\nApart from assimilating the changes we made to the first-tier model, our goal here will be to implement the following:\n\n- a cultural \"vector\" of settlements, representing a series of cultural traits of the aggregated population of the settlements  \n- a mechanism to modify these cultural vectors through the movement of trade goods, according to a global measure of what we call here \"cultural permeability\"  \n- a mechanism that modifies cultural vectors randomly through time (undirected variation)  \n\n## Step 10: cultural vectors\n\nLet us start with implementing the settlements' cultural vector (`culturalVector`). Since there is, for now, no meaning of traits, we can use this new variable to hold the values of the three numbers defining an RGB colour (*i.e.*, red, green, blue; values between 0 and 255) that will then be shown as the icon colour of the settlement.\n\n```NetLogo\nsettlements-own\n[\n  ...\n  culturalVector\n]\n\n...\n\nto create-coastal-settlements\n\n  ; consider only coastal patches\n  let coastalPatches patches with [(isLand = true) and (any? neighbors with [isLand = false])]\n\n  repeat numberOfSettlements\n  [\n    ; ask a random coastal patch without a settlement already\n    ask one-of coastalPatches with [not any? settlements-here]\n    [\n      sprout-settlements 1 ; creates one \"turtle\" of breed settlements\n      [\n        set sizeLevel 1 ; the size level is initiated at minimum (i.e., 1)\n        set stock 0\n        set frequencyOverQuality random-float 1\n        set culturalVector extract-rgb color\n        ; for now, we represent three continuos cultural traits of settlements\n        ; initialized as the rgb values of the settlement color.\n\n        set shape \"circle 2\"\n      ]\n      ; replace the land path cost with the port pathCost\n      set pathCost relativePathCostInPort\n      ; exclude this patch from the pool of coastal patches\n      set coastalPatches other coastalPatches\n    ]\n  ]\n\nend\n\nto update-display\n\n  paint-routes\n  paint-active-routes\n\n  ; scale the size of settlements according to their dynamic free-scaled sizeLevel\n  let maxSettlementSize max [sizeLevel] of settlements\n\n  ask settlements\n  [\n    set hidden? not showSettlements\n    set size 1 + (sizeLevel / maxSettlementSize) * 9\n    set color rgb (item 0 culturalVector) (item 1 culturalVector) (item 2 culturalVector)\n  ]\n\n  ask traders\n  [\n    ifelse (isActivated)\n    [ set hidden? false ]\n    [ set hidden? true ]\n  ]\n\nend\n```\n\n![Pond Trade step 10 - settlement with cultural vector](assets/screenshots/BlockB_PondTrade_step10_cultural-vectors-interface-culturalVectorDetail.png)  \n*Pond Trade step 10 - settlement with cultural vector*\n\nNext, we add a mechanism for traders to record the state of their base `culturalVector` while loading their cargo and pass this vector as an influence over another settlement's `culturalVector`, when unloading. More specifically, this influence will decrease the difference between values in each trait to a measure dependent on the parameter `traitTransmissionRate` (slider, from 0 to 25, by 0.01, default value = 1).\n\n```NetLogo\ntraders-own\n[\n  ...\n\n  culturalSample\n]\n\n...\n\nto load-cargo ; ego = trader\n\n  let settlementHere one-of settlements-here\n\n  ; load cargo\n  set cargoValue [stock] of settlementHere\n  ask settlementHere [ set stock 0 ] ; empty the settlement stock\n\n  set culturalSample [culturalVector] of settlementHere\n\nend\n\n...\n\nto add-trade-effect [ aTrader ] ; ego = settlement\n\n  ; cultural transmission trader to port\n  let newCulturalVector []\n  foreach culturalVector\n  [ ?1 ->\n    let otherSettlementTrait item (length newCulturalVector) [culturalSample] of aTrader\n    let traitChange (otherSettlementTrait - ?1) * (traitTransmissionRate / 100)\n    set newCulturalVector lput (?1 + traitChange) newCulturalVector\n  ]\n;  print (word \"========== \" self \" ============\")\n;  print (word \"old vector: \" culturalVector \", new vector: \" newCulturalVector)\n  set culturalVector newCulturalVector\n\n  set sizeLevel sizeLevel + [cargoValue] of aTrader\n\nend\n```\n\nWith these changes, the model dynamics will now include a general cultural convergence whenever trade partners become stable, especially when trade hubs emerge. After a few thousand simulation steps, the visual result is that all settlements hold the same colour. \n\n![Pond Trade step 10](assets/screenshots/BlockB_PondTrade_step10_cultural-vectors-interface.png)  \n*Pond Trade step 10*\n\nAccording to our initial conceptual model, the next step is implementing a mechanism of undirected variation. We can easily include this as the addition of noise to the value of each trait on the pass of each time step. As with transmission, we could have it regulated by a global parameter of trait mutation rate. However, it may feel already that we have too many global parameters that we can easily conceive as varying widely among settlements. Thus, we move forward by breaking our plan and exploring the idea emerging during the implementation process, back when we defined `frequencyOverQuality`: *what if* most of the parameters about settlements were implemented instead as traits in `culturalVector` and allowed to evolve?\n\n## Step 11: trait selection\n\nTo internalise most parameters as trait values in `culturalVector`, we must convert all former parameters into *hyperparameters*, *i.e.* those values that will be used only to set a range of variation of the settlement-specific values.\n\n| *before* (step 10) | *after* (step 11) |\n| --- | --- |\n| settlementSizeDecayRate | maxSettlementSizeDecayRate |\n| stockDecayRate | maxStockDecayRate |\n| productionRate | maxProductionRate |\n| traitTransmissionRate | maxTraitTransmissionRate |\n| (traitMutationRate) | maxMutationVariation |\n\n We will also exploit the opportunity further and create two extra elements to which we will refer as land and port technology, which will allow us to modify how `pathCost` affects traders' decisions and movements. For these, we need to introduce two extra hyperparameters `landTechVariation` and `portTechVariation`. Notice that we could do the same to the path cost in water, though it would affect the rhythm of the model more drastically.\n\nWe change the code for initialising settlements so that each trait within `culturalVector` is sampled randomly according to the hyperparameters above:\n\n```NetLogo\nto create-coastal-settlements\n\n  ; consider only coastal patches\n  let coastalPatches patches with [(isLand = true) and (any? neighbors with [isLand = false])]\n\n  repeat numberOfSettlements\n  [\n    ; ask a random coastal patch without a settlement already\n    ask one-of coastalPatches with [not any? settlements-here]\n    [\n      sprout-settlements 1 ; creates one \"turtle\" of breed settlements\n      [\n        set sizeLevel 1 ; the size level is initiated at minimum (i.e., 1)\n        set stock 0\n\n        set culturalVector extract-rgb color ; 0#, 1# and 2#\n        ; We add seven continuos cultural traits to the neutral RGB traits,\n        ; representing their attitude and ability involving\n        ; aspects we previously fixed as parameters and one variable:\n        ; 3# relativePathCostInLand (normal distribution around global parameter)\n        set culturalVector lput (random-normal 0 landTechVariation) culturalVector\n        ; 4# relativePathCostInPort (normal distribution around global parameter)\n        set culturalVector lput (random-normal 0 portTechVariation) culturalVector\n        ; 5# settlementSizeDecayRate [0 - maxSettlementSizeDecayRate)\n        set culturalVector lput (random-float maxSettlementSizeDecayRate) culturalVector\n        ; 6# stockDecayRate [0 - maxStockDecayRate)\n        set culturalVector lput (random-float maxStockDecayRate) culturalVector\n        ; 7# produtionRate [0 - maxProductionRate)\n        set culturalVector lput (random-float maxProductionRate) culturalVector\n        ; 8# frequencyOverQuality [0 - 1)\n        set culturalVector lput (random-float 1) culturalVector\n        ; 9# traitTransmissionRate [0 - maxTraitTransmissionRate) *** now, it means specifically the 'openess' of a settlement towards other variants of a trait\n        set culturalVector lput (random-float maxTraitTransmissionRate) culturalVector\n        ; 10# mutationVariation [0 - maxMutationVariation)\n        set culturalVector lput (random-float maxMutationVariation) culturalVector\n\n        set shape \"circle 2\"\n      ]\n      ; replace the land path cost with the port pathCost\n      set pathCost relativePathCostInPort\n      ; exclude this patch from the pool of coastal patches\n      set coastalPatches other coastalPatches\n    ]\n  ]\n\nend\n```\n\nAnd then replace the former parameters with the corresponding indexed values in `culturalVector`:\n\n```NetLogo\n\nto update-settlements\n\n  ask settlements\n  [\n    let thisSettlement self\n\n    ; the sizeLevel of settlements decays with a constant rate, up to 1 (minimum)\n    set sizeLevel max (list 1 (sizeLevel * (1 - ((item 5 culturalVector) / 100)) ) )\n    ; production in stock also decays with a constant rate\n    set stock stock * (1 - ((item 6 culturalVector) / 100))\n    ; prodution is generated in proportion to sizeLevel, following a constant rate\n    set stock stock + sizeLevel * ((item 7 culturalVector) / 100)\n\n    ; determine the current and potential number of traders\n    set currentNumberOfTraders get-current-number-of-traders\n    set potentialNumberOfTraders get-potential-number-of-traders\n\n    ; conditions favors the creation of new traders\n    if (random-float 1 > currentNumberOfTraders / potentialNumberOfTraders )\n    [\n      ; create a new trader or activate an old one\n      repeat 1\n      [\n        ifelse (any? traders with [not isActivated])\n        [\n          ask one-of traders with [not isActivated]\n          [\n            setup-trader thisSettlement\n            move-to thisSettlement\n          ]\n        ]\n        [\n          hatch-traders 1\n          [\n            setup-trader thisSettlement\n          ]\n        ]\n      ]\n      set currentNumberOfTraders get-current-number-of-traders ; update currentNumberOfTraders\n    ]\n\n    ; add variation to the settlement traits (mutation)\n    mutate-traits\n  ]\n\nend\n\n...\n\nto add-trade-effect [ aTrader ] ; ego = settlement\n\n  ; cultural transmission trader to port\n  let newCulturalVector []\n  foreach culturalVector\n  [ ?1 ->\n    let otherSettlementTrait item (length newCulturalVector) [culturalSample] of aTrader\n    let traitChange (otherSettlementTrait - ?1) * ((item 9 culturalVector) / 100)\n    set newCulturalVector lput (?1 + traitChange) newCulturalVector\n  ]\n;  print (word \"========== \" self \" ============\")\n;  print (word \"old vector: \" culturalVector \", new vector: \" newCulturalVector)\n  set culturalVector newCulturalVector\n\n  set sizeLevel sizeLevel + [cargoValue] of aTrader\n\nend\n\n...\n\n\nto-report get-potential-number-of-traders ; ego = settlement\n\n  report (\n    1 +\n    (sizeLevel - 1) * (item 8 culturalVector)\n    )\n\nend\n\n...\n\nto-report get-path-cost [ aPatch aTrader ]\n\n  let pathCostOfPatch [pathCost] of aPatch\n  if ([isLand] of aPatch)\n  [\n    ifelse ([any? settlements-here] of aPatch)\n    [\n      ; path cost in port apply\n      set pathCostOfPatch pathCostOfPatch + [(item 4 culturalVector)] of [base] of aTrader\n    ]\n    [\n      ; path cost in land apply\n      set pathCostOfPatch pathCostOfPatch + [(item 3 culturalVector)] of [base] of aTrader\n    ]\n  ]\n  report pathCostOfPatch\n\nend\n```\n\nFinally, we add a new procedure that apply random (normally-distributed) mutations to all traits separately:\n\n```NetLogo\n\nto mutate-traits\n\n  let mutationVariationToApply (item 10 culturalVector) / 100\n  ;print \"========================================\"\n  ;print culturalVector\n  ; #1, #2 and #3\n  set culturalVector replace-item 0 culturalVector mutate-trait (item 0 culturalVector) 0 255 mutationVariationToApply\n  set culturalVector replace-item 1 culturalVector mutate-trait (item 1 culturalVector) 0 255 mutationVariationToApply\n  set culturalVector replace-item 2 culturalVector mutate-trait (item 2 culturalVector) 0 255 mutationVariationToApply\n\n  ; #3 and #4 (relativePathCostInLand, relativePathCostInPort)\n  set culturalVector replace-item 3 culturalVector mutate-trait (item 3 culturalVector) (-1 * relativePathCostInLand + 1) 100 mutationVariationToApply ; arbitrary maximum\n  set culturalVector replace-item 4 culturalVector mutate-trait (item 4 culturalVector) (-1 * relativePathCostInPort + 1) 100 mutationVariationToApply ; arbitrary maximum\n\n  ; #5, #6 and #6 (settlementSizeDecayRate, stockDecayRate, produtionRate)\n  set culturalVector replace-item 5 culturalVector mutate-trait (item 5 culturalVector) 0 maxSettlementSizeDecayRate mutationVariationToApply\n  set culturalVector replace-item 6 culturalVector mutate-trait (item 6 culturalVector) 0 maxStockDecayRate mutationVariationToApply\n  set culturalVector replace-item 7 culturalVector mutate-trait (item 7 culturalVector) 0 maxProductionRate mutationVariationToApply\n\n  ; #8, #9 and #10 (frequencyOverQuality, traitTransmissionRate, mutationVariation)\n  set culturalVector replace-item 8 culturalVector mutate-trait (item 8 culturalVector) 0 1 mutationVariationToApply\n  set culturalVector replace-item 9 culturalVector mutate-trait (item 9 culturalVector) 0 maxTraitTransmissionRate mutationVariationToApply\n  set culturalVector replace-item 10 culturalVector mutate-trait (item 10 culturalVector) 0 maxMutationVariation mutationVariationToApply\n\n  ;print culturalVector\n\nend\n\nto-report mutate-trait [ traitValue minValue maxValue mutationVar ]\n\n  report (max (list minValue min (list maxValue (traitValue + (random-normal 0 mutationVar) * (maxValue - minValue)))))\n\nend\n```\n\nTo better visualise the distribution of traits along with the simulation, we add four new Plots to our interface. These are histograms of the values of each trait and settlement, giving us a sense of both convergence or *cultural integration* and possibly revealing any evolutionary trends caused by trait selection. For instance, we would expect high selective pressure for settlements with a higher production rate since it is part of the positive feedback loops we implemented earlier in the first tier. \n\n![Pond Trade step 11](assets/screenshots/BlockB_PondTrade_step11_trait-selection-interface.png)  \n*Pond Trade step 11*\n\nAt this stage, we also had to introduce stop conditions to interrupt simulation runs, especially given the potential number of traders under some parameter configurations. The conditions are added to the `go` procedure:\n\n```NetLogo\nto go\n\n  tick\n\n  if (ticks = 10000 or count turtles > 500) [ stop ]\n\n  update-traders\n\n  update-settlements\n\n  update-display\n\nend\n```\n","srcMarkdownNoYaml":""},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"svg","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":"auto","echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["assets/styles.css"],"output-file":"pond-trade-cultural-vectors.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.7.32","bibliography":["references.bib"],"comments":{"hypothesis":true},"theme":"lumen"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}